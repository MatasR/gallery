Index: app/Author.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\n\r\nclass Author extends Model\r\n{\r\n\r\n  var $fillable = ['name', 'slug'];\r\n\r\n    public function products(){\r\n      return $this->hasMany(Product::class);\r\n    }\r\n\r\n    public function categories(){\r\n      return $this->belongsToMany(Category::class, Product::class);\r\n    }\r\n\r\n    /**\r\n     * Get the route key for the model.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getRouteKeyName()\r\n    {\r\n        return 'slug';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Author.php	(revision 0d7980a826f7c8902fd84fdf4245802199c5151f)
+++ app/Author.php	(date 1601750452881)
@@ -4,11 +4,10 @@
 
 use Illuminate\Database\Eloquent\Model;
 
-
 class Author extends Model
 {
 
-  var $fillable = ['name', 'slug'];
+    var $fillable = ['name', 'slug'];
 
     public function products(){
       return $this->hasMany(Product::class);
Index: app/Http/Controllers/ScrapController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Support\\Str;\r\nuse Storage;\r\nuse Goutte\\Client;\r\nuse App\\Category;\r\nuse App\\Product;\r\nuse App\\Author;\r\nuse Intervention\\Image\\ImageManagerStatic as Image;\r\nuse TCG\\Voyager\\Facades\\Voyager;\r\n\r\nclass ScrapController extends Controller\r\n{\r\n\r\n    private function makeAuthorsSurnames(){\r\n      $authors = Author::get();\r\n      foreach ($authors as $author){\r\n\r\n        $split = explode(' ', $author->name);\r\n        $author->surname = last($split);\r\n        // Remove last name from array (which should have a - sign if double surname)\r\n        array_pop($split);\r\n\r\n        // Put name back together (double names should be separated by spaces)\r\n        $author->name = implode(' ', $split);\r\n\r\n        $author->save();\r\n\r\n      }\r\n    }\r\n\r\n    private function convertName(){\r\n\r\n      $products = Product::get();\r\n      foreach ($products as $product){\r\n\r\n        $image = json_decode($product->image)[0];\r\n\r\n        $table = array(\r\n          'Ą'=>'A',\r\n          'ą'=>'a',\r\n          'Č'=>'C',\r\n          'č'=>'c',\r\n          'Ę'=>'E',\r\n          'ę'=>'e',\r\n          'Ė'=>'E',\r\n          'ė'=>'e',\r\n          'Į'=>'I',\r\n          'į'=>'i',\r\n          'Š'=>'S',\r\n          'š'=>'s',\r\n          'Ū'=>'U',\r\n          'ū'=>'u',\r\n          'Ų'=>'U',\r\n          'ų'=>'u',\r\n          'Ž'=>'Z',\r\n          'ž'=>'z'\r\n        );\r\n\r\n        $newName = strtr($image, $table);\r\n\r\n        echo $image.' -> '.$newName.'<br>';\r\n\r\n        rename(storage_path('app/public'.$image), storage_path('app/public'.$newName));\r\n\r\n        $product->image = '[\"'.$newName.'\"]';\r\n        $product->save();\r\n\r\n      }\r\n\r\n    }\r\n\r\n    private function makeThumb(Product $product){\r\n\r\n      $currentImage = Voyager::image(json_decode($product->image)[0]);\r\n\r\n      $filename = last(explode(\"/\", $currentImage));\r\n      $fileType = last(explode(\".\", $filename));\r\n      $filePath = explode(\"/\", $currentImage);\r\n      array_pop($filePath); // Remove last (filename)\r\n      array_shift($filePath);array_shift($filePath);array_shift($filePath);array_shift($filePath); // Remove 4 first (https://domain.com/folder/)\r\n      $filePath = implode(\"/\", $filePath);\r\n\r\n      $newName = str_replace('.'.$fileType, \"\", $filename).'-thumb-300.'.$fileType;\r\n\r\n      //Check if thumb exists\r\n      if(file_exists(storage_path('app/public/'.$filePath.'/'.$newName)))\r\n        dd('thumb already exists');\r\n\r\n      $newImage = Image::make($currentImage);\r\n      $newImage->resize(300, null, function ($constraint) {\r\n        $constraint->aspectRatio();\r\n      });\r\n      $newImage->save(storage_path('app/public/'.$filePath.'/'.$newName));\r\n\r\n      return back();\r\n\r\n    }\r\n\r\n    private function makeSlugs(){\r\n\r\n      $products = Product::get();\r\n      foreach ($products as $product) {\r\n\r\n        if(!$product->slug){\r\n          $product->slug = $product->id.'-'.Str::slug($product->title, '-');\r\n          $product->save();\r\n\r\n          echo $product->id.'.'.$product->title.' -> '.$product->slug.'<br>';\r\n        }\r\n\r\n        //echo $product->id.'.'.$product->title.' = '.$product->slug.'<br>';\r\n\r\n      }\r\n\r\n    }\r\n\r\n    private function makeThumbs(){\r\n      $products = Product::get();\r\n      foreach ($products as $product){\r\n\r\n        $currentImage = Voyager::image(json_decode($product->image)[0]);\r\n\r\n        echo $product->id.'. '.$currentImage.'<br>';\r\n\r\n        $filename = last(explode(\"/\", $currentImage));\r\n        $newName = substr($filename, 0, -4).'-thumb-300.jpg';\r\n\r\n        //Check if thumb exists\r\n        if(file_exists(storage_path('app/public/products/May2020/'.$newName)))\r\n          continue;\r\n\r\n        $newImage = Image::make($currentImage);\r\n        $newImage->resize(300, null, function ($constraint) {\r\n          $constraint->aspectRatio();\r\n        });\r\n        $newImage->save(storage_path('app/public/products/May2020/'.$newName));\r\n\r\n      }\r\n    }\r\n\r\n    private function importAuthorProducts(){\r\n\r\n      $catID = [\r\n        //'grafika' => 11,\r\n        //'tapyba' => 12,\r\n        'klasika' => 13\r\n      ];\r\n\r\n      foreach($this->getAuthors() as $cat => $authors){\r\n\r\n        echo $cat.'<br>';\r\n        $cat = $catID[$cat];\r\n\r\n        foreach($authors as $i => $author){\r\n\r\n          //if($i < 11)\r\n            //continue;\r\n\r\n          $authorID = Author::where('name', $author['name'])->where('surname', $author['surname'])->first()->id;\r\n          echo $author['name'].' '.$author['surname'].' ('.$authorID.')<br/>';\r\n\r\n          $products = $this->getProducts($author['link']);\r\n          foreach($products as $product){\r\n\r\n            $this->importProduct($product['title'], $cat, $product['image'], $authorID);\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    private function import(){\r\n\r\n      //foreach($this->cats() as $cat){\r\n\r\n        $cat['title'] = 'Fotografija';\r\n        $cat['link'] = 'https://smallgallery.net/levas-ziriakovas/';\r\n\r\n        // Find cat model\r\n        $insertedCat = Category::where('slug', Str::slug($cat['title']))->first();\r\n        if(!$insertedCat){\r\n          dd('cant find cat: '.$cat['title']);\r\n          // Add cat to categories table\r\n          $insertedCat = Category::create([\r\n            'title' => Str::ucfirst($cat['title']),\r\n            'slug' => Str::slug($cat['title'], '-')\r\n          ]);\r\n        }\r\n\r\n        // Check if cat has childs (only for foreach loop)\r\n        if(isset($cat['cats'])){\r\n          foreach($cat['cats'] as $subcat){\r\n\r\n            $insertedSubcat = Category::where('slug', Str::slug($subcat['title']))->first();\r\n            if(!$insertedSubcat){\r\n              dd('cant find subcat: '.$subcat['title']);\r\n              // Add subcat to categories table\r\n              $insertedSubcat = Category::create([\r\n                'title' => Str::ucfirst($subcat['title']),\r\n                'slug' => Str::slug($subcat['title']),\r\n                'parent_id' => $insertedCat->id\r\n              ]);\r\n            }\r\n\r\n            // Import products\r\n            $products = $this->getProducts($subcat['link']);\r\n            foreach($products as $product){\r\n              $this->importProduct($product['title'], $insertedSubcat->id, $product['image']);\r\n            }\r\n\r\n          }\r\n        }else{\r\n\r\n          // No child cat - import products\r\n          $products = $this->getProducts($cat['link']);\r\n          foreach($products as $product){\r\n            $this->importProduct($product['title'], $insertedCat->id, $product['image']);\r\n          }\r\n        }\r\n\r\n      //}\r\n\r\n    }\r\n\r\n    private function importProducts(){\r\n\r\n      $products = $this->getProducts('https://smallgallery.net/antikvaras/');\r\n\r\n      //$i = 0;\r\n      foreach($products as $product){\r\n\r\n        if($product['title']){\r\n\r\n          // Check if product already exists\r\n          if(!Product::where('title', $product['title'])->first()){\r\n\r\n            $img = file_get_contents($product['image']);\r\n            $imgName = '/images/April2020/'.substr($product['image'], strrpos($product['image'], '/') + 1);\r\n            Storage::put('/public'.$imgName, $img);\r\n\r\n            // Insert to database products table\r\n            $inserted = Product::create([\r\n              'title' => $product['title'],\r\n              'category_id' => 16, //Antikvaras\r\n              //'author_id' => 122, //Levas Žiriakovas\r\n              'images' => '[\"'.$imgName.'\"]'\r\n            ]);\r\n\r\n            echo 'Product \"'.$product['title'].'\" imported with ID:'.$inserted->id.'<br>';\r\n\r\n          }else\r\n            echo 'Product \"'.$product['title'].'\" already exists<br>';\r\n\r\n        }else{\r\n\r\n          $img = file_get_contents($product['image']);\r\n          $imgName = '/images/April2020/'.substr($product['image'], strrpos($product['image'], '/') + 1);\r\n          Storage::put('/public'.$imgName, $img);\r\n\r\n          $images = $inserted->images;\r\n          //$images = str_replace('\"', '', $images);\r\n          $images = str_replace('[', '', $images);\r\n          $images = str_replace(']', '', $images);\r\n          $images = explode(',', $images);\r\n          $images[] = '\"'.$imgName.'\"';\r\n          $images = '['.implode(',', $images).']';\r\n\r\n          $inserted->images = $images;\r\n          $inserted->save();\r\n\r\n          echo 'Product \"'.$inserted->title.'\" updated with new image<br>';\r\n\r\n        }\r\n\r\n        // Limited loop cycle\r\n        //$i++;\r\n        //if($i > 100)\r\n          //break;\r\n      }\r\n\r\n    }\r\n\r\n    // Import\r\n    private function importProduct($title, $cat, $image, $author = false){\r\n\r\n      // Check if product already exists\r\n      $product = Product::where('category_id', $cat)->where('title', $title)->first();\r\n      if(!$product){\r\n\r\n        // Insert to database products table\r\n        $inserted = Product::create([\r\n          'title' => $title,\r\n          'category_id' => $cat,\r\n          'author_id' => $author\r\n        ]);\r\n\r\n        // Make slug\r\n        $slug = $inserted->id.'-'.Str::slug($title, '-');\r\n        $inserted->slug = $slug;\r\n        $inserted->save();\r\n\r\n        // Download product image\r\n        $curl = curl_init();\r\n        curl_setopt($curl, CURLOPT_URL, $image);\r\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\r\n        $img = curl_exec($curl);\r\n        curl_close($curl);\r\n\r\n        // Make image name\r\n        $imgExtension = last(explode('.', $image));\r\n        $imgName = '/products/'.$this->catSlug($cat).'/';\r\n        if($author)\r\n          $imgName .= $this->authorSlug($author).'/';\r\n        $imgName .= $slug.'.'.$imgExtension;\r\n\r\n        // Save image\r\n        Storage::put('/public'.$imgName, $img);\r\n        $inserted->image = '[\"'.$imgName.'\"]';\r\n        $inserted->save();\r\n\r\n        // Create thumb for the product\r\n        $this->makeThumb($inserted);\r\n\r\n        echo 'Product imported with ID:'.$inserted->id.'<br>';\r\n      }else\r\n        echo 'Product already exist: '.$product->id.'<br>';\r\n\r\n    }\r\n\r\n    // Get a list of products with their data from a sub cat or author cat link\r\n    private function getProducts($url = 'https://smallgallery.net/antikvaras/'){\r\n\r\n      $client = new Client();\r\n\r\n      $crawler = $client->request('GET', $url);\r\n\r\n      // Get a list of products\r\n      $products = $crawler->filter('.envira-gallery-item')->each(function($node){\r\n\r\n        if($node->filter('.envira-caption')->count())\r\n          $title = $node->filter('.envira-caption')->text();\r\n        else\r\n          $title = '';\r\n\r\n        $image = $node->filter('a.envira-gallery-link')->attr('href');\r\n\r\n        return [\r\n          'title' => $title,\r\n          'image' => $image\r\n        ];\r\n\r\n      });\r\n\r\n      return $products;\r\n\r\n    }\r\n\r\n    private function importAuthors(){\r\n\r\n      foreach($this->getAuthors() as $cat){\r\n\r\n        foreach($cat as $author){\r\n\r\n          $slug = Str::slug($author['name'], '-');\r\n\r\n          $findAuthor = Author::where('slug', $slug)->first();\r\n          if(!$findAuthor){\r\n            Author::create([\r\n              'name' => $author['name'],\r\n              'slug' => $slug\r\n            ]);\r\n            echo $author['name'].'('.$slug.') Added to the db<br>';\r\n          }else\r\n            echo $author['name'].'('.$slug.') Already exists<br>';\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    // Getting authors from nav\r\n    private function getAuthors(){\r\n\r\n      $client = new Client();\r\n      $url = 'https://smallgallery.net/';\r\n\r\n      $cats = [\r\n        //'grafika',\r\n        //'tapyba',\r\n        'klasika',\r\n      ];\r\n\r\n      // Loop each cat, because each cat has its own authors\r\n      foreach($cats as $cat){\r\n        $crawler = $client->request('GET', $url.$cat);\r\n\r\n        // Loop each author\r\n        $author = $crawler->filter('.envira-gallery-item')->each(function($node){\r\n\r\n          $name = $node->filter('.envira-album-title')->text();\r\n\r\n          // Make surname from full name\r\n          $split = explode(' ', $name);\r\n          $surname = last($split);\r\n          // Remove last name from array (which should have a - sign if double surname)\r\n          array_pop($split);\r\n\r\n          // Put name back together (double names should be separated by spaces)\r\n          $name = implode(' ', $split);\r\n\r\n          // Return it's info\r\n          return [\r\n            'name' => $name,\r\n            'surname' => $surname,\r\n            'link' => $node->filter('a')->attr('href')\r\n          ];\r\n\r\n        });\r\n\r\n        $authors[$cat] = $author;\r\n\r\n      }\r\n\r\n      return $authors;\r\n\r\n    }\r\n\r\n    // Getting cats from nav\r\n    private function cats(){\r\n\r\n      $client = new Client();\r\n      $url = 'https://smallgallery.net/';\r\n\r\n      $crawler = $client->request('GET', $url);\r\n\r\n      // Get a list of cats\r\n      $cats = $crawler->filter('.menu-item-24')->first()->filter('ul > li')->each(function ($node){\r\n\r\n        // If has submenu\r\n        if($node->filter('ul')->count()){\r\n\r\n          // Loop each sub element\r\n          $subCats = $node->filter('ul li a')->each(function ($subNode){\r\n            return [\r\n              'title' => $subNode->text(),\r\n              'link' => $subNode->attr('href')\r\n            ];\r\n          });\r\n\r\n          // Return main cat with childs\r\n          $return = [\r\n            'title' => $node->filter('a')->text(),\r\n            'cats' => $subCats\r\n          ];\r\n\r\n        // If main cat without childs\r\n        }else{\r\n          // Just return main cat\r\n          $return = [\r\n            'title' => $node->text(),\r\n            'link' => $node->filter('a')->attr('href')\r\n          ];\r\n        }\r\n\r\n        return $return;\r\n\r\n      });\r\n\r\n      // Return results for import function\r\n      return $cats;\r\n\r\n    }\r\n\r\n    // Get cat slug from catID (for importProduct function)\r\n    private function catSlug($id){\r\n\r\n      $cat = Category::where('id', $id)->first();\r\n      return $cat->slug;\r\n\r\n    }\r\n\r\n    // Get author slug from authorID (for importProduct function)\r\n    private function authorSlug($id){\r\n\r\n      $author = Author::where('id', $id)->first();\r\n      return $author->slug;\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Http/Controllers/ScrapController.php	(revision 0d7980a826f7c8902fd84fdf4245802199c5151f)
+++ app/Http/Controllers/ScrapController.php	(date 1601750121638)
@@ -15,6 +15,16 @@
 class ScrapController extends Controller
 {
 
+    public function makeAuthorsFullname(){
+
+        $authors = Author::get();
+        foreach ($authors as $author){
+            $author->fullname = $author->name.' '.$author->surname;
+            $author->save();
+        }
+
+    }
+
     private function makeAuthorsSurnames(){
       $authors = Author::get();
       foreach ($authors as $author){
Index: routes/web.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Illuminate\\Support\\Facades\\Route;\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Web Routes\r\n|--------------------------------------------------------------------------\r\n|\r\n| Here is where you can register web routes for your application. These\r\n| routes are loaded by the RouteServiceProvider within a group which\r\n| contains the \"web\" middleware group. Now create something great!\r\n|\r\n*/\r\n\r\nRoute::get('/', 'AppController@home');\r\n\r\nRoute::group(['prefix' => 'admin'], function () {\r\n    Voyager::routes();\r\n});\r\n\r\nRoute::get('autoriai', 'AppController@authors');\r\nRoute::get('autorius/{author}', 'AppController@author');\r\nRoute::get('apie-mus', 'AppController@about');\r\n\r\nRoute::get('ajax/modal/{id}', 'AjaxController@modal');\r\nRoute::post('ajax/load-more', 'AjaxController@loadMore');\r\n\r\nRoute::get('{cat}', 'AppController@category');\r\nRoute::get('{cat}/{product}', 'AppController@product');\r\n\r\n// Function for fixing broken links with 3 segments\r\nRoute::get('{url1}/{url2}/{url3}', 'AppController@url');\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- routes/web.php	(revision 0d7980a826f7c8902fd84fdf4245802199c5151f)
+++ routes/web.php	(date 1601750147650)
@@ -19,6 +19,8 @@
     Voyager::routes();
 });
 
+Route::get('scrap/make-author-fullname', 'ScrapController@makeAuthorsFullname');
+
 Route::get('autoriai', 'AppController@authors');
 Route::get('autorius/{author}', 'AppController@author');
 Route::get('apie-mus', 'AppController@about');
Index: app/Providers/EventServiceProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Providers;\r\n\r\nuse Illuminate\\Auth\\Events\\Registered;\r\nuse Illuminate\\Auth\\Listeners\\SendEmailVerificationNotification;\r\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\r\nuse Illuminate\\Support\\Facades\\Event;\r\n\r\nclass EventServiceProvider extends ServiceProvider\r\n{\r\n    /**\r\n     * The event listener mappings for the application.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $listen = [\r\n        Registered::class => [\r\n            SendEmailVerificationNotification::class,\r\n        ],\r\n    ];\r\n\r\n    /**\r\n     * Register any events for your application.\r\n     *\r\n     * @return void\r\n     */\r\n    public function boot()\r\n    {\r\n        parent::boot();\r\n\r\n        //\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Providers/EventServiceProvider.php	(revision 0d7980a826f7c8902fd84fdf4245802199c5151f)
+++ app/Providers/EventServiceProvider.php	(date 1601655181887)
@@ -18,6 +18,9 @@
         Registered::class => [
             SendEmailVerificationNotification::class,
         ],
+        \TCG\Voyager\Events\BreadDataChanged::class => [
+            \App\Listeners\AuthorFullname::class
+        ]
     ];
 
     /**
